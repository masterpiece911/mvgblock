#!/usr/bin/env python
# -*- coding: utf-8 -*-


import os
import json
import subprocess

# Settings
# ----------

with open('/absolute/path/to/your/mvgconfig.json') as file:
    settings = json.load(file)
    # the file schema for the json is as follows:
    # {
    #   "stations": [ // a list of all stations we want to get data for
    #     { // following two are filters, only departures containing these tags will be shown, unless the middle mouse button is pressed
    #       "directions": [ // a list of selected directions)
    #         "Klinikum Gro\u00dfhadern",
    #         "Harras"
    #       ],
    #       "lines": [ // a list of selected lines
    #         "U6"
    #       ],
    #       "name": "Garching Forschungszentrum" // name of station
    #     }
    #   ],
    #   "station_index": 1, // currently shown station
    #   "departure_index": 0, // currently shown departure time
    #   "current": [ // a list of departures, previously pulled
    #     {
    #       "line": "154", // the line of departure shown
    #       "destination": "Nordbad", // destination
    #       "minutes": 1 // time of arrival in minutes
    #     },
    #   ]
    # }
stationIndex= int(settings['station_index'])
departureIndex = int(settings['departure_index'])
stationName= settings['stations'][stationIndex]['name']
directions= settings['stations'][stationIndex]['directions']
lines= settings['stations'][stationIndex]['lines']
currentInfo= settings['current']

# ----------
def blockEvent():
    global currentInfo
    global departureIndex

    event = '0'
    try:
        event = os.environ['BLOCK_BUTTON']
    except KeyError:
        event = '0'

    # event = '1'

    if event == '1': #Left-click
        ## Reload the data
        currentInfo = loadData()
        ## set index to zero
        departureIndex = 0
        ## filter the data
        ## print data
        data = filteredData()
        printer(data)
        return True
    elif event == '2': #Middle-click
        ## reload the data
        currentInfo= loadData()
        ## set index to zero
        departureIndex=0
        ## print data
        printer(currentInfo)
        return True
    elif event == '3': #Right-click
        ## change station
        changeStationIndex()
        ## reload the data
        currentInfo= loadData()
        ## set index to zero
        departureIndex= 0
        ## filter the data
        ## print data
        data = filteredData()
        printer(data)
        return True
    elif event == '4': #Scroll-up
        ## change index(negative)
        changeDepartureIndex(-1)
        ## print data
        printer(settings['current'])
        return True
    elif event == '5': #Scroll-down
        ## change index(positive)
        changeDepartureIndex(+1)
        ## print data
        printer(currentInfo)
        return True
    return False

def changeStationIndex():

    global stationIndex
    global stationName
    global directions
    global lines


    stationIndex += 1
    if stationIndex == len(settings['stations']):
        stationIndex = 0

    stationName = settings['stations'][stationIndex]['name']
    directions= settings['stations'][stationIndex]['directions']
    lines= settings['stations'][stationIndex]['lines']

def changeDepartureIndex(iterate):

    global departureIndex

    if departureIndex + iterate == len(settings['current']) or departureIndex + iterate < 0:
        pass
    else:
        departureIndex += iterate


def loadData():

    global currentInfo

    info = json.loads(subprocess.check_output(["mvg_json", stationName]))

    currentInfo = info['result_sorted']
    return currentInfo

def filteredData():

    global currentInfo
    global directions
    global lines

    filteredData = []
    if currentInfo == None:
        return []
    for departure in currentInfo:
        if departure['destination'] in directions:
            if departure['line'] in lines:
                filteredData.append(departure)

    return filteredData

def printer(data):

    refreshSettings(data)


    if data == [] or data == None:
        frag = []
        frag.append('<span color="#DC143C">')
        frag.append('</span>')
        output = ':: NO DEPARTURE DATA AVAILABLE FOR %s ::' % stationName
        if 'straße'.decode('utf-8') in output:
            output = output.replace('straße'.decode('utf-8'), 'str.')
        if 'ß'.decode('utf-8') in output:
            output = output.replace('ß'.decode('utf-8'), 'ss')
        output = output.upper()
        output = frag[0] + output + frag[1]
        outputshort = frag[0] + ':: NO DEPARTURE DATA AVAILABLE ::' + frag[1]
        print output.encode('utf-8')
        print outputshort.encode('utf-8')
        exit()

    toShow = data[departureIndex]
    if toShow['minutes'] > 15:
        color = '#C0C0C0'
    elif toShow['minutes'] >= 10:
        color = '#00FF00'
    elif toShow['minutes'] >= 8:
        color = '#FFFF00'
    elif toShow['minutes'] >= 5:
        color = '#FFA500'
    elif toShow['minutes'] < 5:
        color = '#FF0000'
    #FF0000 RED
    #FFA500 ORANGE
    #FFFF00 YELLOW
    #00FF00 GREEN

    frag = []
    frag.append('<span color="#C0C0C0">')
    frag.append('</span>')
    frag.append('<span color="' + color + '">')
    frag.append('</span>')
    frag.append('<span color="#C0C0C0">')
    frag.append('</span>')

    output = ('Line %s to %s DEPARTS IN %s MINUTE(S) FROM %s ') % (toShow['line'], toShow['destination'], toShow['minutes'], stationName)
    output = output.lower()

    if 'straße'.decode('utf-8') in output:
        output = output.replace('straße'.decode('utf-8'), 'str.')
    if 'ß'.decode('utf-8') in output:
        output = output.replace('ß'.decode('utf-8'), 'ss')
    output = output.upper()

    loc = []
    loc.append(output.find('TO '))
    loc.append(output.find('DEPARTS'))
    loc.append(output.find(' IN '))
    loc.append(output.find('FROM'))

    outputlong = frag[0] + output[:loc[2]] + frag[1] + frag[2] + output[loc[2]:loc[3]] + frag[3] + frag[4] + output[loc[3]:] + frag[5]

    outputshort = frag[0] + output[:loc[0]] + output[loc[1]:loc[2]]  + frag[1] + frag[2] + output[loc[2]:loc[3]] + frag[3] + frag[4] + output[loc[3]:] + frag[5]

    print outputlong.encode('utf-8')
    print outputshort.encode('utf-8')




def refreshSettings(data):

    global stationIndex
    global departureIndex
    global settings

    settings['current']= data
    settings['station_index']= stationIndex
    settings['departure_index']= departureIndex

    with open('/home/sahin/.config/i3/scripts/mvgconfig.json', 'w') as file:
        json.dump(settings, file, indent=2)

if not blockEvent():
    print '<span color="#FFA500">:: CLICK TO LOAD DEPARTURE DATA ::</span>'
